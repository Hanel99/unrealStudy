https://ansohxxn.github.io/programmers/114/

#include<vector>
#include<queue>
#include<iostream>
using namespace std;

#define CARDINAL_POINT 4

struct Pos {
    int x, y;
    Pos(int _y, int _x) { y = _y; x = _x; }
};

int minMoves(vector<vector<int>> maze, int x, int y) {
    const int n = maze.size(); // n 행
    const int m = maze[0].size(); // m 열

    // 방향 북동남서.
    int deltaY[CARDINAL_POINT] = { -1, 0, 1, 0 };
    int deltaX[CARDINAL_POINT] = { 0, 1, 0, -1 };

    vector<vector<bool>> checked(n, vector<bool>(m)); //이미 방문한 노드 체크
    vector<vector<int>> dist(n, vector<int>(m)); // 최단거리

    queue<Pos> q;

    //출발지
    q.push(Pos(0, 0));
    checked[0][0] = true;
    dist[0][0] = 0;

    while (!q.empty())
    {
        //방문
        Pos pos = q.front();
        q.pop();
        int nowY = pos.y;
        int nowX = pos.x;

        for (int i = 0; i < CARDINAL_POINT; i++) // 방문 기준 4방향 예약
        {
            int nextY = nowY + deltaY[i];
            int nextX = nowX + deltaX[i];

            if (nextY < 0 || nextY >= n || nextX < 0 || nextX >= m) // 맵벗어남
                continue;

            if (maze[nextY][nextX] == 1) // 벽
                continue;

            if (checked[nextY][nextX]) // 이미 방문함
                continue;

            //예약 
            q.push(Pos(nextY, nextX));
            checked[nextY][nextX] = true;
            dist[nextY][nextX] = dist[nowY][nowX] + 1; // 최단거리 업데이트
        }
    }

    if (dist[x][y] == 0) // 도착지 최단경로가 0이면 방문 못했다는뜻
        return -1;
    else
        return dist[x][y];
}

void main()
{
    vector<vector<int>> maze;

    vector<int> n1;

    n1.push_back(0);
    n1.push_back(1);
    n1.push_back(0);

    vector<int> n2;

    n2.push_back(1);
    n2.push_back(0);
    n2.push_back(1);

    vector<int> n3;

    n3.push_back(0);
    n3.push_back(2);
    n3.push_back(2);

    maze.push_back(n1);
    maze.push_back(n2);
    maze.push_back(n3);

    cout << minMoves(maze, 1, 1);
}